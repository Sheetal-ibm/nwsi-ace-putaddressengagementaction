
/* =====================================================================================================
*
* Licensed Materials - Property of Nationwide Building Society
*
* Nationwide Enterprise Middleware DC
*
========================================================================================================
********************************************************************************************************
** File Version History
********************************************************************************************************
** Change ID 	  WorkItemId	     CID 		       Date 		   Description 			Test cycle
** ----------- 	 ------------	--------------- 	---------- 	     ----------------- 		-----------
**   TFR 3			277540 		C417151/C412459  	26/07/2019 	      Initial Version 	       DEV
**												
********************************************************************************************************
** Description of the ESQL
** =====================================================================================================
** The ESQL module is a catch handler for any of the user or default exceptions that might 
** occur during the runtime of the flow.
********************************************************************************************************/

BROKER SCHEMA uk.co.nationwide.nem.esb.putAddressEngagementAction

PATH uk.co.nationwide.nem.esb.patterns,uk.co.nationwide.nem.esb.logging;

CREATE COMPUTE MODULE CatchHandler_ErrorResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		DECLARE errorRow,cdeRow ROW;
        DECLARE fetchFromConf 	BOOLEAN TRUE;
        DECLARE refToExcpReport	REFERENCE TO InputRoot.XMLNSC.exceptionReport;	
        DECLARE errorLookUp,errorResultRef REFERENCE TO errorRow;	
		DECLARE refToEnvSrvData,refToEnv   REFERENCE TO Environment;
		DECLARE refToOutStack,refToErrItem REFERENCE TO OutputRoot;
		DECLARE errorCode				   CHARACTER refToExcpReport.errorCode;
			
		SET Environment.ESBServiceData.logPosition = 'P5';
		
		MOVE  refToEnvSrvData TO Environment.ESBServiceData; 
		
		SET refToEnvSrvData.logErrorId 	= COALESCE(refToEnvSrvData.logErrorId,UUIDASCHAR);
		CALL log4jv2loggingExceptionList(Environment,InputRoot,InputExceptionList,'ESB',refToEnvSrvData.sourceSystemID);
		
		----------------------------------------------------------------------------------------------------------------------
		--Create the Error response to be sent to the consumer using the exception report generated by ErrorHandler subflow---
		----------------------------------------------------------------------------------------------------------------------
	      
		IF EXISTS(Environment.ProviderErrorInfo.code[]) THEN
	       	   		       	
	       	------------------------------------
	     	--Handling Input Validation Errors--
	     	------------------------------------
	       	CASE
		       	WHEN (errorCode = '2952') THEN
		       		IF NOT SINGULAR(Environment.ProviderErrorInfo.code[]) THEN
		       			FOR refToEnvCode AS Environment.ProviderErrorInfo.code[] DO
		       				CREATE LASTCHILD of cdeRow NAME 'faultCode' VALUE refToEnvCode;
		       			END FOR;	
 
		       		ELSE
		       			SET cdeRow.faultCode  = Environment.ProviderErrorInfo.code;
		       		END IF;
		       	-------------------------------------------
		     	--Handling Modelled/UnModelled Exceptions--
		     	-------------------------------------------
		       	ELSE
		       		SET cdeRow.faultCode = Environment.ProviderErrorInfo.code;		       			
	       	END CASE;	
	    	
	    ELSE
		    CASE
			    WHEN (errorCode = '3152') THEN	
		   		--------------------------------------------------
				--Handling SOR connection error(NEM.ESB.503.001)--
				--------------------------------------------------	
		        	SET cdeRow.faultCode 	 = SvcOperationName || '_UIPD_Unavail';			   
					--------------------------------------------------
			    	--Handling timeout from Backend(NEM.ESB.504.001)--
			    	--------------------------------------------------
			    	MOVE refToExcpReport TO refToExcpReport.exceptionText.*[<];
			    	WHILE LASTMOVE(refToExcpReport) DO 
			    		IF FIELDNAME(refToExcpReport) = 'SocketTimeoutException' THEN 
			    			SET cdeRow.faultCode 	 = SvcOperationName || '_UIPD_ReqTimeout';			
			    		END IF;	
			    		MOVE refToExcpReport LASTCHILD;
			    	END WHILE; 
			     	------------------------------
			     	--Handling Generic Exception--
			     	------------------------------
		    	ELSE					
					SET errorLookUp.result.ERROR_CODE 	 = 'NEM.ESB.IPM.500.100';
					SET errorLookUp.result.ERROR_MESSAGE = 'Internal Server Error'; 
		            SET fetchFromConf = FALSE;		    
		    END CASE;		    	 
	    END IF;    	
    	
    	IF fetchFromConf THEN
    		CALL retrieveCacheSubTree(refToEnv,'ERROR_LOOKUP',Environment.Operation);
    		
    		FOR refToFaultCde AS cdeRow.faultCode[] DO
    			CREATE LASTCHILD OF errorLookUp AS errorResultRef NAME 'result';
    			SET errorResultRef = refToEnv.ERROR_LOOKUP.{refToFaultCde}.Item;
    		END FOR;		
    		
    		IF NOT EXISTS(errorLookUp.result[]) THEN
    			SET errorLookUp.result.ERROR_CODE 	 = 'NEM.ESB.IPM.502.100';
    			SET errorLookUp.result.ERROR_MESSAGE = 'An unknown error was received from the upstream provider service';
    		END IF;	
    	END IF;
    	   
		SET OutputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code" = COALESCE(errorLookUp.result.HTTP_CODE,500);	
    		
   		-- Creating Error Response 
		CREATE LASTCHILD OF OutputRoot.JSON.Data AS refToOutStack IDENTITY (JSON.Array)errors;	
        
        FOR errRowRef AS errorLookUp.result[] DO
	    	CREATE LASTCHILD OF refToOutStack AS refToErrItem NAME 'Item';
	        CREATE LASTCHILD OF refToErrItem NAME 'code'        VALUE errRowRef.ERROR_CODE;
	        CREATE LASTCHILD OF refToErrItem NAME 'message'     VALUE errRowRef.ERROR_MESSAGE;
	        CREATE LASTCHILD OF refToErrItem NAME 'logErrorId'  VALUE refToEnvSrvData.logErrorId;
        END FOR;
		
		-- Appending the status to FID for logging at ServiceGatewayOut
		SET refToEnvSrvData.functionalIdentifier =   refToEnvSrvData.functionalIdentifier || ', ' ||
													 COALESCE(errorLookUp.result.SEVERITY,'INTERNAL');
	
		--Setting service status for logging at ServiceGatewayOut		
		SET Environment.SvcStatus	=	'Error';       

		RETURN TRUE;
		
	END;

END MODULE;
